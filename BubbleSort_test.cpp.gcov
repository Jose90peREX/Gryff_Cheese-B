        -:    0:Source:BubbleSort_test.cpp
        -:    0:Graph:input_tester-BubbleSort_test.gcno
        -:    0:Data:input_tester-BubbleSort_test.gcda
        -:    0:Runs:1
        -:    1:   #include "gtest/include/gtest/gtest.h"
        -:    2:   #include "BubbleSort.h"
        -:    3:   #include <vector>
        -:    4:   using namespace std; 
        -:    5:
       3*:    6:  TEST(BubbleSortedTest, UnsortedVector) {
        1:    7:    vector<int> v = {2, 1, 5, 3, 4};
        1:    8:    vector<int> expected = {1, 2, 3, 4, 5};
        1:    9:    BubbleSort(v.data(), v.size());
       1*:   10:    ASSERT_EQ(v, expected);
        -:   11:  }
------------------
_ZN36BubbleSortedTest_UnsortedVector_TestD0Ev:
        1:    6:  TEST(BubbleSortedTest, UnsortedVector) {
------------------
_ZN36BubbleSortedTest_UnsortedVector_TestD2Ev:
    #####:    6:  TEST(BubbleSortedTest, UnsortedVector) {
------------------
_ZN36BubbleSortedTest_UnsortedVector_Test8TestBodyEv:
        1:    6:  TEST(BubbleSortedTest, UnsortedVector) {
        1:    7:    vector<int> v = {2, 1, 5, 3, 4};
        1:    8:    vector<int> expected = {1, 2, 3, 4, 5};
        1:    9:    BubbleSort(v.data(), v.size());
       1*:   10:    ASSERT_EQ(v, expected);
        -:   11:  }
------------------
        -:   12:  
       3*:   13:  TEST(BubbleSortedTest, NegativeVector) {
        1:   14:	 vector<int> v = {-2, -1, -5, -3, -4}; 
        1:   15:	 vector<int> expected = {-5, -4, -3, -2, -1};
        1:   16:	 BubbleSort(v.data(), v.size());
       1*:   17:	 ASSERT_EQ(v, expected);
        -:   18:  }
------------------
_ZN36BubbleSortedTest_NegativeVector_TestD0Ev:
        1:   13:  TEST(BubbleSortedTest, NegativeVector) {
------------------
_ZN36BubbleSortedTest_NegativeVector_TestD2Ev:
    #####:   13:  TEST(BubbleSortedTest, NegativeVector) {
------------------
_ZN36BubbleSortedTest_NegativeVector_Test8TestBodyEv:
        1:   13:  TEST(BubbleSortedTest, NegativeVector) {
        1:   14:	 vector<int> v = {-2, -1, -5, -3, -4}; 
        1:   15:	 vector<int> expected = {-5, -4, -3, -2, -1};
        1:   16:	 BubbleSort(v.data(), v.size());
       1*:   17:	 ASSERT_EQ(v, expected);
        -:   18:  }
------------------
        -:   19: 
       3*:   20:  TEST(BubbleSortedTest, MixedVector) {
        1:   21:	  vector<int> v = {2, -1, 5, -3, 4};
        1:   22:	  vector<int> expected = {-3, -1, 2, 4, 5};
        1:   23:	  BubbleSort(v.data(), v.size());
       1*:   24:	  ASSERT_EQ(v, expected);
        -:   25:  }
------------------
_ZN33BubbleSortedTest_MixedVector_TestD0Ev:
        1:   20:  TEST(BubbleSortedTest, MixedVector) {
------------------
_ZN33BubbleSortedTest_MixedVector_TestD2Ev:
    #####:   20:  TEST(BubbleSortedTest, MixedVector) {
------------------
_ZN33BubbleSortedTest_MixedVector_Test8TestBodyEv:
        1:   20:  TEST(BubbleSortedTest, MixedVector) {
        1:   21:	  vector<int> v = {2, -1, 5, -3, 4};
        1:   22:	  vector<int> expected = {-3, -1, 2, 4, 5};
        1:   23:	  BubbleSort(v.data(), v.size());
       1*:   24:	  ASSERT_EQ(v, expected);
        -:   25:  }
------------------
        -:   26:  
       3*:   27:  TEST(BubbleSortedTest, LargeNumbersVector) {
        1:   28:	  vector<int> v = {200, 100, 500, 300, 400};
        1:   29:	  vector<int> expected = {100, 200, 300, 400, 500};
        1:   30:	  BubbleSort(v.data(), v.size());
       1*:   31:	  ASSERT_EQ(v, expected);
        -:   32:  }
------------------
_ZN40BubbleSortedTest_LargeNumbersVector_TestD0Ev:
        1:   27:  TEST(BubbleSortedTest, LargeNumbersVector) {
------------------
_ZN40BubbleSortedTest_LargeNumbersVector_TestD2Ev:
    #####:   27:  TEST(BubbleSortedTest, LargeNumbersVector) {
------------------
_ZN40BubbleSortedTest_LargeNumbersVector_Test8TestBodyEv:
        1:   27:  TEST(BubbleSortedTest, LargeNumbersVector) {
        1:   28:	  vector<int> v = {200, 100, 500, 300, 400};
        1:   29:	  vector<int> expected = {100, 200, 300, 400, 500};
        1:   30:	  BubbleSort(v.data(), v.size());
       1*:   31:	  ASSERT_EQ(v, expected);
        -:   32:  }
------------------
        -:   33:
       3*:   34:  TEST(BubbleSortedTest, RepeatingNumbersVector) {
        1:   35:	  vector<int> v = {1, 2, 1, 2, 3};
        1:   36:	  vector<int> expected = {1, 1, 2, 2, 3};
        1:   37:	  BubbleSort(v.data(), v.size());
       1*:   38:	  ASSERT_EQ(v, expected);
        -:   39:  }
------------------
_ZN44BubbleSortedTest_RepeatingNumbersVector_TestD0Ev:
        1:   34:  TEST(BubbleSortedTest, RepeatingNumbersVector) {
------------------
_ZN44BubbleSortedTest_RepeatingNumbersVector_TestD2Ev:
    #####:   34:  TEST(BubbleSortedTest, RepeatingNumbersVector) {
------------------
_ZN44BubbleSortedTest_RepeatingNumbersVector_Test8TestBodyEv:
        1:   34:  TEST(BubbleSortedTest, RepeatingNumbersVector) {
        1:   35:	  vector<int> v = {1, 2, 1, 2, 3};
        1:   36:	  vector<int> expected = {1, 1, 2, 2, 3};
        1:   37:	  BubbleSort(v.data(), v.size());
       1*:   38:	  ASSERT_EQ(v, expected);
        -:   39:  }
------------------
        -:   40: 
       3*:   41:  TEST(BubbleSortedTest, LargerSizeVector) {
        1:   42:	  vector<int> v = {10, 4, 6, 8, 3, 9, 2, 5, 1, 7};
        1:   43:	  vector<int> expected = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        1:   44:	  BubbleSort(v.data(), v.size());
       1*:   45:	  ASSERT_EQ(v, expected);
        -:   46:  }
