        -:    0:Source:quickSort.h
        -:    1:// quick sort project edition.cpp : This file contains the 'main' function. Program execution begins and ends there.
        -:    2://
        -:    3:
        -:    4:#pragma once
        -:    5:#include <iostream>
        -:    6:#include <cstdlib>
        -:    7:using namespace std;
        -:    8:
    #####:    9:void swapQ(int* a, int* b) // function used to swap
        -:   10:{
    #####:   11:    int t = *a;
    #####:   12:    *a = *b;
    #####:   13:    *b = t;
    #####:   14:}
        -:   15:
    #####:   16:int partition(int arr[], int low, int high) // function used in quick sort to use the swap function
        -:   17:{
    #####:   18:    int pivot = arr[high]; // pivot, choosing the last element
    #####:   19:    int pindex = (low - 1); // partition index
    #####:   20:    for (int j = low; j <= high - 1; j++)
        -:   21:    {
    #####:   22:        if (arr[j] <= pivot)
        -:   23:        {
    #####:   24:            pindex++;
    #####:   25:            swapQ(&arr[pindex], &arr[j]);
        -:   26:        }
        -:   27:    }
    #####:   28:    swapQ(&arr[pindex + 1], &arr[high]);
    #####:   29:    return (pindex + 1);
        -:   30:}
        -:   31:
        -:   32:/*Function used to choose a random values as the pivot for quciksort*/
    #####:   33:int partition_Rand(int arr[], int low, int high) {
        -:   34:    //srand(time(0));
    #####:   35:    int random = low + rand() % (high - low);
    #####:   36:    swapQ(&arr[high], &arr[random]);
    #####:   37:    return partition(arr, low, high);
        -:   38:}
        -:   39:
        -:   40:/*Function used to find the median value of the array and choose it as the pivot*/
    #####:   41:int partition_Median(int arr[], int low, int high) {
    #####:   42:    int mid = low + (high - low) / 2;
    #####:   43:    if (arr[low] > arr[mid]) {
    #####:   44:        swapQ(&arr[low], &arr[mid]);
        -:   45:    }
    #####:   46:    if (arr[mid] > arr[high]) {
    #####:   47:        swapQ(&arr[mid], &arr[high]);
        -:   48:    }
    #####:   49:    if (arr[low] > arr[mid]) {
    #####:   50:        swapQ(&arr[low], &arr[mid]);
        -:   51:    }
    #####:   52:    swapQ(&arr[high], &arr[mid]);
    #####:   53:    return partition(arr, low, high);
        -:   54:}
        -:   55:
    #####:   56:void quickSort(int arr[], int low, int high, int choice) // actual quicksort function which combines all the other quicksort functions
        -:   57:{
    #####:   58:    int pindex = 0;
    #####:   59:    if (low < high)
        -:   60:    {
    #####:   61:        if (choice == 1) {
    #####:   62:            pindex = partition(arr, low, high);
        -:   63:        }
    #####:   64:        else if (choice == 2) {
    #####:   65:            pindex = partition_Rand(arr, low, high);
        -:   66:        }
        -:   67:        else {
    #####:   68:            pindex = partition_Median(arr, low, high);
        -:   69:        }
        -:   70:
    #####:   71:        quickSort(arr, low, pindex - 1, choice);
    #####:   72:        quickSort(arr, pindex + 1, high, choice);
        -:   73:    }
    #####:   74:}
        -:   75:
    #####:   76:void print(int arr[], int size)
        -:   77:{
    #####:   78:    for (int i = 0; i < size; i++)
        -:   79:    {
    #####:   80:        cout << arr[i] << " ";
        -:   81:    }
    #####:   82:}
